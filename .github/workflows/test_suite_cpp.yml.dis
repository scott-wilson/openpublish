name: C++ Test Suite

on:
  push:
    paths:
      - .github/workflows/*_cpp.yml
      - bindings/cpp/**
      - src/**
      - Cargo.lock
      - Cargo.toml
      - deny.toml
      - .gitmodules
  pull_request:
    paths:
      - .github/workflows/*_cpp.yml
      - bindings/cpp/**
      - src/**
      - Cargo.lock
      - Cargo.toml
      - deny.toml
      - .gitmodules

jobs:
  test:
    name: C++ test
    defaults:
      run:
        working-directory: bindings/cpp
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        include:
          - os: ubuntu-latest
            cmake_flags: -DBUILD_WITH_CHECK_COVERAGE=ON
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Make Build Directory
        run: mkdir -p build
      - name: CMake Configure
        working-directory: bindings/cpp/build
        run: |
          # Make cmocka a static dependency when testing.
          cmake ../ -DBUILD_SHARED_LIBS=OFF -DBUILD_CPPOPENPUBLISH_TESTS=ON ${{ matrix.cmake_flags }}
      - name: CMake Build
        working-directory: bindings/cpp/build
        run: |
          cmake --build . --config=Debug
      - name: Run Test
        working-directory: bindings/cpp/build
        run: ctest -C Debug -VV --output-on-failure
      - name: Run Valgrind
        working-directory: bindings/cpp/build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install -y valgrind
          valgrind -v --leak-check=full --show-leak-kinds=all tests/test_context
          valgrind -v --leak-check=full --show-leak-kinds=all tests/test_publish
          valgrind -v --leak-check=full --show-leak-kinds=all tests/test_runner
          valgrind -v --leak-check=full --show-leak-kinds=all tests/test_value
      - name: Run LCov
        working-directory: bindings/cpp/build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install -y lcov
          lcov -c -d . -o coverage.info
      - uses: codecov/codecov-action@v3
        with:
          flags: lang-cpp
          files: build/coverage.info
