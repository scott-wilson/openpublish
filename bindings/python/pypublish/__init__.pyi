from __future__ import annotations

from typing import Dict, List, Union

Value = Union[None, bool, int, float, str, List["Value"], Dict[str, "Value"]]

class Context:
    def __init__(self) -> None: ...
    def get(self, key: str) -> Value: ...
    def set(self, key: str, value: Value) -> None: ...
    def copy(self) -> Context: ...
    def to_view(self) -> ContextView: ...

class ContextView:
    def __init__(self, context: Context) -> None: ...
    def get(self, key: str) -> Value: ...
    def copy(self) -> Context: ...
    def to_view(self) -> ContextView: ...

class Publish:
    async def pre_publish(
        self, context: ContextView
    ) -> Union[Context, ContextView]: ...
    async def rollback_pre_publish(self, context: ContextView) -> None: ...
    async def publish(self, context: ContextView) -> Union[Context, ContextView]: ...
    async def rollback_publish(self, context: ContextView) -> None: ...
    async def post_publish(
        self, context: ContextView
    ) -> Union[Context, ContextView]: ...
    async def rollback_post_publish(self, context: ContextView) -> None: ...

async def run(publish: Publish) -> Context: ...
