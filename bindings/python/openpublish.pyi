import collections.abc
import typing

import typing_extensions

Value: typing_extensions.TypeAlias = (
    None | bool | int | float | str | list[Value] | dict[str, Value]
)

class Context:
    def __init__(
        self,
        value: collections.abc.Mapping[str, Value] | None = None,
    ) -> None: ...
    def get(self, key: str) -> Value | None: ...
    def set(self, key: str, value: Value) -> None: ...
    def copy(self) -> typing.Self: ...
    def to_view(self) -> ContextView: ...

class ContextView:
    def get(self, key: str) -> Value | None: ...
    def copy(self) -> Context: ...
    def to_view(self) -> typing.Self: ...

class Publish:
    def __init__(self) -> None: ...
    async def pre_publish(self, context: ContextView) -> Context | ContextView: ...
    async def rollback_pre_publish(self, context: ContextView) -> None: ...
    async def publish(self, context: ContextView) -> Context | ContextView: ...
    async def rollback_publish(self, context: ContextView) -> None: ...
    async def post_publish(self, context: ContextView) -> Context | ContextView: ...
    async def rollback_post_publish(self, context: ContextView) -> None: ...

async def run(publish: Publish) -> Context | ContextView: ...
